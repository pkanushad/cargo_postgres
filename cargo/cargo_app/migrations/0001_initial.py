# Generated by Django 4.1.3 on 2022-11-14 11:04

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BookModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Book', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CounterPartyModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Counter_Party', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='HolidayModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Singapore_Platts', models.DateField(default=datetime.datetime.now)),
                ('ICE', models.DateField(default=datetime.datetime.now)),
            ],
        ),
        migrations.CreateModel(
            name='PricingContractModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Pricing_Contract', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PricingMethodeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Pricing_method', models.CharField(max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='ProductModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Product', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='StrategyModel',
            fields=[
                ('Strategy', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='TraderModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Trader', models.CharField(default='Select', max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='UnitModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PhysicalBlotter',
            fields=[
                ('ID', models.IntegerField(primary_key=True, serialize=False)),
                ('Date', models.DateField(default=datetime.datetime.now)),
                ('Derivative', models.CharField(choices=[('physical', 'physical')], default='physical', max_length=100)),
                ('kbbl', models.FloatField(blank=True, null=True)),
                ('kMT', models.FloatField(blank=True, null=True)),
                ('m3', models.FloatField(blank=True, null=True)),
                ('Nominated_quantity', models.CharField(max_length=100, null=True)),
                ('Density', models.FloatField(null=True)),
                ('Premium_discount', models.FloatField(null=True)),
                ('BL_Date', models.DateField(default=datetime.datetime.now, null=True)),
                ('Pricing_term', models.CharField(choices=[('Tomorrow', 'Tomorrow'), ('25 days after', '25 days after')], max_length=100, null=True)),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('holidays', models.CharField(choices=[('singapore_holidays', 'singapore_holidays'), ('plate_holidays', 'plate_holidays')], max_length=100, null=True)),
                ('Delivery_mode', models.CharField(blank=True, choices=[('1', 'Tank'), ('2', 'Vessel'), ('3', 'PLT')], max_length=100, null=True)),
                ('port', models.CharField(choices=[('Port1', 'Port1'), ('Port2', 'Port2')], max_length=120, null=True)),
                ('Terminal', models.CharField(choices=[('Terminal1', 'Terminal1'), ('Terminal2', 'Terminal2')], max_length=120, null=True)),
                ('Vessal_name', models.CharField(blank=True, max_length=120, null=True)),
                ('Tank_no', models.CharField(blank=True, choices=[('Tank1', 'Tank1'), ('Tank2', 'Tank2'), ('Tank3', 'Tank3'), ('Tank4', 'Tank4')], max_length=120, null=True)),
                ('External_Terminal', models.CharField(blank=True, max_length=120, null=True)),
                ('Terminal_cost', models.IntegerField(blank=True, null=True)),
                ('Fright_cost', models.IntegerField(blank=True, null=True)),
                ('additional_secondary_charge', models.IntegerField(blank=True, null=True)),
                ('Total_no_days', models.IntegerField(blank=True, null=True)),
                ('price_days', models.IntegerField(blank=True, null=True)),
                ('unprice_days', models.IntegerField(blank=True, null=True)),
                ('total_volume', models.FloatField(blank=True, null=True)),
                ('price_volume', models.FloatField(blank=True, null=True)),
                ('unprice_volume', models.FloatField(blank=True, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('priced_price', models.IntegerField(blank=True, null=True)),
                ('unpriced_price', models.IntegerField(blank=True, null=True)),
                ('Shore_recieved', models.IntegerField(blank=True, null=True)),
                ('Difference', models.IntegerField(blank=True, null=True)),
                ('Notes', models.CharField(blank=True, max_length=250, null=True)),
                ('Supporting_document', models.FileField(blank=True, null=True, upload_to='file_uploads/')),
                ('Status', models.CharField(blank=True, choices=[('Open', 'Open'), ('Closed', 'Closed')], default='Open', max_length=120, null=True)),
                ('Book', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cargo_app.bookmodel')),
                ('Counter_Party', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cargo_app.counterpartymodel')),
                ('Pricing_Contract', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cargo_app.pricingcontractmodel')),
                ('Pricing_method', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cargo_app.pricingmethodemodel')),
                ('Product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cargo_app.productmodel')),
                ('Strategy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cargo_app.strategymodel')),
                ('Trader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cargo_app.tradermodel')),
                ('unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cargo_app.unitmodel')),
            ],
        ),
    ]
